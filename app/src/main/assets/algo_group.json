[{"_id":"526aa8e90a71693447000017","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Backtracking","title":"Bron-Kerbosch algorithm for enumerating maximal cliques in $O^*(3^\\frac{V}{3})$","uri":"bron-kerbosh"},{"_id":"532c41308612780200000003","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Backtracking","title":"Graph coloring","uri":"graph-coloring"},{"_id":"5324ee953569a40200000003","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Backtracking","title":"Maximum weighted independent set in $O^*(3^\\frac{V}{3})$ (alternative to Bron-Kerbosh)","uri":"mis-weighted"},{"_id":"526aa8a70a71693447000015","group":"Algorithms and Data Structures","implementations":[{"language":"python"},{"language":"java"}],"subgroup":"Combinatorics","title":"Binomial coefficients and factorials","uri":"binomial-coefficients"},{"_id":"526b291c539fce7c1e000016","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Combinatorics","title":"Enumeration of arrangements","uri":"arrangements"},{"_id":"52c869de20a55c0200000003","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Combinatorics","title":"Enumeration of combinations","uri":"combinations"},{"_id":"52cc58f01d3c0b0200000003","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Combinatorics","title":"Enumeration of combinatorial sequences. Universal method in $O(n^2)$","uri":"combinatorial_enumeration"},{"_id":"526b2a4c539fce7c1e000018","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Combinatorics","title":"Enumeration of partitions","uri":"partitions"},{"_id":"526b2a90539fce7c1e00001a","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Combinatorics","title":"Enumeration of permutations","uri":"permutations"},{"title":"Enumeration of set partitions","uri":"set-partitions","group":"Algorithms and Data Structures","subgroup":"Combinatorics","_id":"5393986b30a4790200000003","implementations":[{"language":"java"}]},{"_id":"52a257395d15fe0200000003","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Combinatorics","title":"Random permutations, arrangements and shuffling","uri":"random_permutation"},{"_id":"526b5f9f9d872cdc15000054","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Combinatorics","title":"Random tree and graph generation. Pr√ºfer code","uri":"random-tree"},{"_id":"52b68d3a17e3510200000003","title":"Producer/Consumer based on queue","uri":"producer-consumer-queue","group":"Basic Language Constructs","subgroup":"Concurrency","implementations":[{"language":"Java"}]},{"_id":"554f56526b72fc0300000005","title":"Threads","uri":"threads","group":"Basic Language Constructs","subgroup":"Concurrency","implementations":[{"language":"c++"}]},{"_id":"526aa7d00a71693447000012","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Data Structures","title":"Binary Search Tree","uri":"binary-search-tree"},{"_id":"526aa6050a71693447000009","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Data Structures","title":"Binary heap","uri":"binary-heap"},{"_id":"526aa6210a7169344700000b","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Data Structures","title":"Binary heap with increase priority operation","uri":"binary-heap-increase-prio"},{"_id":"5269314ebba11a7056000005","group":"Algorithms and Data Structures","implementations":[{"language":"java"},{"language":"c++"}],"subgroup":"Data Structures","title":"Disjoint-set data structure","uri":"disjoint-sets"},{"_id":"526b20c8bb6b6b8467000015","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Data Structures","title":"Doubly Linked list","uri":"doubly-linked-list"},{"_id":"526b40155831a21c17000007","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Data Structures","title":"Fenwick tree 2D for sum","uri":"fenwick-tree-2d"},{"_id":"526b21e0539fce7c1e000009","group":"Algorithms and Data Structures","implementations":[{"language":"java"},{"language":"c++"}],"subgroup":"Data Structures","title":"Fenwick tree for sum and maximum","uri":"fenwick-tree"},{"_id":"526b82ef9d872cdc1500008e","group":"Algorithms and Data Structures","implementations":[{"language":"c++"}],"subgroup":"Data Structures","title":"Fenwick tree for sum on Map","uri":"fenwick-tree-on-map"},{"_id":"526b41a35831a21c17000009","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Data Structures","title":"Fenwick tree for sum with extended operations","uri":"fenwick-tree-extended"},{"_id":"5310bab9593cbf0200000003","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Data Structures","title":"Hashmap with chains","uri":"hashmap"},{"_id":"526b4a749d872cdc15000011","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Data Structures","title":"Heavy-light tree decomposition for vertices or edges","uri":"heavy-light"},{"_id":"526b4af19d872cdc15000015","group":"Algorithms and Data Structures","implementations":[{"language":"java"},{"language":"c++"}],"subgroup":"Data Structures","title":"KdTree for nearest point query in $O(\\log{N})$ on average","uri":"kdtree"},{"_id":"526b4ba09d872cdc15000018","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Data Structures","title":"KdTree for rectangular query in $O(\\sqrt{N})$","uri":"kdtree-rect"},{"_id":"526b566f9d872cdc15000020","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Data Structures","title":"LinkCut tree - dynamic tree connectivity","uri":"link-cut-tree-connectivity"},{"_id":"526b56849d872cdc15000022","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Data Structures","title":"LinkCut tree - dynamic tree lca","uri":"link-cut-tree-lca"},{"_id":"53b9fe6daa32010200000003","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Data Structures","title":"LinkCut tree - dynamic tree with path queries","uri":"link-cut-tree"},{"_id":"526b5c659d872cdc15000042","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Data Structures","title":"Mergeable heap. A heap with merge, add, removeMin operation in $O(\\log{N})$","uri":"mergeable-heap"},{"_id":"55d3d4c9a65d210300000003","title":"Metric tree for nearest point query","uri":"metric-tree","group":"Algorithms and Data Structures","subgroup":"Data Structures","implementations":[{"language":"java"}]},{"_id":"526b821f9d872cdc15000084","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Data Structures","title":"Mo's algorithm (sqrt-decomposition for answering queries)","uri":"mos_algorithm"},{"_id":"526b5ec19d872cdc1500004a","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Data Structures","title":"Persistent Tree","uri":"persistent-tree"},{"_id":"526b5f139d872cdc15000050","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Data Structures","title":"Quadtree for rectangular queries on NxM board with n points in $O(min(n, N+M))$","uri":"quad-tree"},{"_id":"526b5f2f9d872cdc15000052","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Data Structures","title":"Queue with minimum query in $O(1)$","uri":"queue-min"},{"_id":"526b60079d872cdc15000058","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Data Structures","title":"RMQ: Sparse Table","uri":"sparse-table-rmq"},{"_id":"5304b1386704790200000003","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Data Structures","title":"Rtree for nearest segment query","uri":"rtree"},{"_id":"526b7d5d9d872cdc1500005c","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Data Structures","title":"Segment Tree 2D without recursion with single addition for maximum","uri":"segment-tree-fast-add-max-2d"},{"_id":"52c72028d1bbb80200000003","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Data Structures","title":"Segment Tree for Add/Max","uri":"segment-tree-add-max"},{"_id":"526b7d889d872cdc1500005e","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Data Structures","title":"Segment Tree with interval modification","uri":"segment-tree"},{"_id":"526b7db99d872cdc15000060","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Data Structures","title":"Segment Tree with interval modification. Non-recursive implementation","uri":"segment-tree-fast"},{"_id":"52c738fad1bbb80200000005","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Data Structures","title":"Segment Tree with sum lower bound operation","uri":"segment-tree-sum-lower-boud"},{"_id":"526b7e7c9d872cdc15000062","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Data Structures","title":"Segment Tree. Simple non-recursive implementation","uri":"segment-tree-simple"},{"_id":"526b81bd9d872cdc1500007e","group":"Algorithms and Data Structures","implementations":[{"language":"java"},{"language":"python"}],"subgroup":"Data Structures","title":"Treap with explicit keys","uri":"treap-bst"},{"_id":"526b81e69d872cdc15000080","group":"Algorithms and Data Structures","implementations":[{"language":"java"},{"language":"c++"}],"subgroup":"Data Structures","title":"Treap with implicit key with interval modification","uri":"treap"},{"_id":"531a02f421b6ea0200000003","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Data compression","title":"Arithmetic coding","uri":"arithmetic-coding"},{"_id":"5322f6edb5fd8d0200000003","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Data compression","title":"Burrows‚ÄìWheeler transform","uri":"bwt"},{"_id":"5322fd85b5fd8d0200000005","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Data compression","title":"Lempel‚ÄìZiv‚ÄìWelch algorithm","uri":"lzw"},{"_id":"52d29c88f1d0640200000003","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Depth-First Search","title":"Bridges, cut points, edge-biconnected components, condensation tree","uri":"biconnected-components"},{"_id":"526b1f78bb6b6b846700000d","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Depth-First Search","title":"Eulerian cycle","uri":"euler-cycle"},{"_id":"550ab12031d3ad0300000003","title":"Non-recursive DFS","uri":"dfs-no-recursion","group":"Algorithms and Data Structures","subgroup":"Depth-First Search","implementations":[{"language":"java"}]},{"_id":"526b1fd3bb6b6b846700000f","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Depth-First Search","title":"Strongly connected components, component DAG. Kosaraju's algorithm","uri":"strongly-connected-components"},{"_id":"526b201fbb6b6b8467000011","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Depth-First Search","title":"Strongly connected components. Tarjan's algorithm","uri":"scc-tarjan"},{"_id":"526b2077bb6b6b8467000013","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Depth-First Search","title":"Topological sorting","uri":"topological-sorting"},{"_id":"526b216e539fce7c1e000005","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Dynamic Programming","title":"Convex Hull Optimization","uri":"convex-hull-optimization"},{"_id":"526b21b0539fce7c1e000007","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Dynamic Programming","title":"Domino fill","uri":"domino-fill"},{"_id":"526b22a6539fce7c1e00000c","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Dynamic Programming","title":"Edit distance in $O(N^2)$","uri":"edit-distance"},{"_id":"526b2798539fce7c1e00000e","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Dynamic Programming","title":"Longest common subsequence in $O(N^2)$","uri":"lcs"},{"_id":"526b27bb539fce7c1e000010","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Dynamic Programming","title":"Longest increasing subsequence in $O(N^2)$","uri":"lis"},{"title":"Longest palindromic subsequence","uri":"longest-palindrome","group":"Algorithms and Data Structures","subgroup":"Dynamic Programming","_id":"52d2a164f1d0640200000005","implementations":[{"language":"java"}]},{"_id":"526b27ef539fce7c1e000012","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Dynamic Programming","title":"Number of perfect matchings","uri":"perfect-matches-count"},{"_id":"526aa73b0a7169344700000e","group":"Algorithms and Data Structures","implementations":[{"language":"python"},{"language":"ruby"},{"language":"java"}],"subgroup":"Dynamic Programming","title":"Number of solutions of linear equality","uri":"linear-equality"},{"_id":"526b2867539fce7c1e000014","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Dynamic Programming","title":"Optimal matrix chain multiplication in $O(N^3)$","uri":"matrix-multiply"},{"_id":"526b7ec09d872cdc15000064","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Dynamic Programming","title":"Shortest Hamiltonian cycle (TSP) in $O(2^N * N^2)$","uri":"dynamic-tsp"},{"_id":"526b7f109d872cdc15000066","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Dynamic Programming","title":"Shortest Hamiltonian path in $O(2^N * N^2)$","uri":"shortest-hamiltonian-path"},{"_id":"52693f2bbba11a705600000b","group":"Algorithms and Data Structures","implementations":[{"language":"c++"},{"language":"python"},{"language":"ruby"},{"language":"javascript"},{"language":"java"}],"subgroup":"Elementary Algorithms","title":"Binary Exponentiation","uri":"binary-exponentiation"},{"_id":"52692f1fbba11a7056000003","group":"Algorithms and Data Structures","implementations":[{"language":"java"},{"language":"Haskell"}],"subgroup":"Elementary Algorithms","title":"Binary Search","uri":"binary-search"},{"_id":"52d2aa1df1d0640200000007","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Elementary Algorithms","title":"Ternary search","uri":"ternary-search"},{"_id":"526b4aa09d872cdc15000013","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Flows","title":"Hungarian algorithm for assignment problem","uri":"assignment-hungary"},{"_id":"526b574e9d872cdc1500002b","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Flows","title":"Maximum flow of minimum cost in $O(V^3*FLOW)$","uri":"min-cost-flow-simple"},{"_id":"526b57a99d872cdc1500002d","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Flows","title":"Maximum flow of minimum cost with Bellman‚ÄìFord in $O(min(E^2*V^2, E*V*FLOW))$","uri":"min-cost-flow-bf"},{"title":"Maximum flow of minimum cost with potentials for dense graphs in $O(min(E*V^3, V^2*FLOW))$","uri":"min-cost-flow-dense-pot","group":"Algorithms and Data Structures","subgroup":"Flows","_id":"535632d88f07be0200000003","implementations":[{"language":"java"}]},{"_id":"526b57f19d872cdc1500002f","group":"Algorithms and Data Structures","implementations":[{"language":"java"},{"language":"c++"}],"subgroup":"Flows","title":"Maximum flow of minimum cost with potentials in $O(min(E^2*V*\\log{V}, E*\\log{V}*FLOW))$","uri":"min-cost-flow-pot"},{"_id":"526b585a9d872cdc15000031","group":"Algorithms and Data Structures","implementations":[{"language":"java"},{"language":"c++"}],"subgroup":"Flows","title":"Maximum flow. Dinic's algorithm in $O(V^2 * E)$","uri":"dinic-flow"},{"_id":"526b58b59d872cdc15000034","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Flows","title":"Maximum flow. Edmonds-Karp algorithm in $O(min( E^2*V, E*FLOW ))$","uri":"edmonds-karp"},{"_id":"526b58e59d872cdc15000036","group":"Algorithms and Data Structures","implementations":[{"language":"java"},{"language":"javascript"}],"subgroup":"Flows","title":"Maximum flow. Ford-Fulkerson alogithm in $O(V^2 * FLOW)$","uri":"ford-fulkerson"},{"_id":"526b58fe9d872cdc15000038","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Flows","title":"Maximum flow. Push‚Äìrelabel algorithm in $O(V^3)$","uri":"preflow"},{"_id":"5366dca53c2afb0200000005","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Geometry","title":"Angle, area, orientation, sort, rotation, perpendicular","uri":"angle-area-orientation-sort-rotation-perpendicular"},{"_id":"526b448e9d872cdc15000005","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Geometry","title":"Circle operations","uri":"circle-operations"},{"_id":"526b44f29d872cdc15000007","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Geometry","title":"Class Complex","uri":"complex"},{"_id":"52d31a4bc4e6580200000003","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Geometry","title":"Closest pair of a planar point set in $O(N * \\log^2{N})$ using divide and conquer","uri":"closest_pair"},{"_id":"52a66f94c4e1a30200000003","group":"Algorithms and Data Structures","implementations":[{"language":"python"},{"language":"java"},{"language":"c++"},{"language":"javascript"}],"subgroup":"Geometry","title":"Convex Hull in $O(N * \\log{N})$","uri":"convex-hull"},{"title":"Convex cut","uri":"convex-cut","group":"Algorithms and Data Structures","subgroup":"Geometry","_id":"5366e0823c2afb0200000007","implementations":[{"language":"java"}]},{"_id":"526b1577bb6b6b8467000003","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Geometry","title":"Delaunay triangulation and Voronoi diagram in $O(N^{1.5})$","uri":"delaunay-voronoi"},{"_id":"526b1dafbb6b6b8467000005","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Geometry","title":"Delaunay triangulation in $O(N^4)$","uri":"delaunay"},{"_id":"526b82cc9d872cdc1500008c","group":"Algorithms and Data Structures","implementations":[{"language":"c++"}],"subgroup":"Geometry","title":"Diametr of a planar point set in $O(N\\log{N})$ using rotating calipers","uri":"diametr"},{"_id":"526b2125539fce7c1e000003","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Geometry","title":"Drawing of connected graph with Force-Based method","uri":"force-based-graph-drawing"},{"_id":"526b831a9d872cdc15000090","group":"Algorithms and Data Structures","implementations":[{"language":"c++"},{"language":"java"}],"subgroup":"Geometry","title":"Finding a pair of intersected segments in $O(N\\log{N})$ using scanline","uri":"find-segments-intersection"},{"title":"Point classification","uri":"point-classification","group":"Algorithms and Data Structures","subgroup":"Geometry","_id":"5366d4103c2afb0200000003","implementations":[{"language":"java"}]},{"_id":"52f76425747b8d0200000003","group":"Algorithms and Data Structures","implementations":[{"language":"Java"}],"subgroup":"Geometry","title":"Point in polygon query in $O(N)$","uri":"point-in-polygon"},{"_id":"53e4cdaf7c48c60200000003","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Geometry","title":"Point location in $O(\\log{n})$ with preprocessing in $O(n*\\log{n})$","uri":"point-location"},{"_id":"53022f0def00000200000005","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Geometry","title":"Point to segment and line distance","uri":"point-to-segment-distance"},{"_id":"536f750da7aca50200000005","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Geometry","title":"Polygon and circle intersection area in $O(N)$","uri":"polygon-circle-intersection"},{"_id":"5398b24e8152730200000003","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Geometry","title":"Polygons intersection area in $O(N^2*\\log{N})$","uri":"polygon-polygon-intersection"},{"_id":"53141ab6647c040200000003","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Geometry","title":"Random polygon using 2-opt","uri":"random-polygon"},{"_id":"536ebb83a7aca50200000003","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Geometry","title":"Rectangular Union Area using sweep line in $O(N\\log{N})$","uri":"rectangular-union-area"},{"_id":"530a169ca591010200000003","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Geometry","title":"Segments and Lines intersection","uri":"segments-intersection"},{"_id":"53131ab2b217ec0200000003","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Geometry","title":"Segments union length","uri":"segments-union-length"},{"_id":"526b81fa9d872cdc15000082","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Graphs","title":"Tree Centers","uri":"tree-centers"},{"_id":"526b85869d872cdc15000099","group":"Algorithms and Data Structures","implementations":[{"language":"c++"}],"subgroup":"Graphs","title":"Tree isomorphism","uri":"tree-isomorphism"},{"_id":"526b1e79bb6b6b8467000007","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Linear Algebra","title":"Determinant of a matrix by Gauss and Crout algorithms in $O(N^3)$","uri":"determinant"},{"_id":"526b44169d872cdc15000003","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Linear Algebra","title":"Gaussian elimination algorithm in $O(N^3)$","uri":"gauss-elimination"},{"_id":"526b56e59d872cdc15000026","group":"Algorithms and Data Structures","implementations":[{"language":"java"},{"language":"c++"}],"subgroup":"Linear Algebra","title":"Matrix","uri":"matrix"},{"_id":"554f4b716b72fc0300000003","title":"Iteration","uri":"iteration","group":"Basic Language Constructs","subgroup":"Loops","implementations":[{"language":"java"}]},{"_id":"526b55dd9d872cdc1500001c","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Lowest Common Ancestor","title":"LCA. Lowest common ancestor queries in $O(\\log{N})$","uri":"lca"},{"_id":"526b562c9d872cdc1500001e","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Lowest Common Ancestor","title":"LCA: Sparse Table","uri":"sparse-table-lca"},{"_id":"548ccc9def3a390300000003","title":"Classification","uri":"classification","group":"Algorithms and Data Structures","subgroup":"Machine Learning","implementations":[{"language":"python"}]},{"_id":"5688db2d6d0f130300be154a","title":"Convolutional neural network","uri":"convolutional-neural-network","group":"Algorithms and Data Structures","subgroup":"Machine Learning","implementations":[{"language":"python"}]},{"_id":"526b84ae9d872cdc15000095","group":"Algorithms and Data Structures","implementations":[{"language":"c++"}],"subgroup":"Matching","title":"Maximum matching for bipartite graph. Hopcroft-Karp algorithm in $O(E * \\sqrt{V})$","uri":"hopcroft-karp"},{"_id":"526b59469d872cdc1500003a","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Matching","title":"Maximum matching for bipartite graph. Kuhn's algorithm in $O(E*V)$","uri":"kuhn-matching2"},{"_id":"526b595c9d872cdc1500003c","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Matching","title":"Maximum matching for bipartite graph. Kuhn's algorithm in $O(V^3)$","uri":"kuhn-matching"},{"_id":"526b5b769d872cdc1500003e","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Matching","title":"Maximum matching for general graph. Edmonds' algorithm in $O(V^3)$","uri":"edmonds-matching"},{"_id":"52693ccebba11a7056000007","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Miscellaneous","title":"2-satisfiability","uri":"2-sat"},{"_id":"526b82789d872cdc15000088","group":"Algorithms and Data Structures","implementations":[{"language":"c++"}],"subgroup":"Miscellaneous","title":"Arbitrary-precision arithmetic","uri":"bigint"},{"title":"Array rotation","uri":"array-rotation","group":"Algorithms and Data Structures","subgroup":"Miscellaneous","_id":"530c5e3e20b5520200000003","implementations":[{"language":"java"}]},{"_id":"5314af91647c040200000007","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Miscellaneous","title":"Cycle finding. Floyd's and Brent's algorithms","uri":"cycle-finding"},{"_id":"526b56a69d872cdc15000024","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Miscellaneous","title":"Longest increasing subsequence in $O(N * \\log{N})$","uri":"lis-nlogn"},{"_id":"526b57259d872cdc15000029","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Miscellaneous","title":"Max Rectangle","uri":"max-rectangle"},{"_id":"52d34785c4e6580200000009","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Miscellaneous","title":"Maximum Zero Submatrix in $O(N*M)$","uri":"maximum-zero-submatrix"},{"_id":"52d917253a09180200000003","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Miscellaneous","title":"Monotonic Approximation in $O(N\\log{N})$","uri":"monotonic-approximation"},{"_id":"52d33565c4e6580200000007","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Miscellaneous","title":"Number of inversions in $O(N\\log{N})$","uri":"inversions"},{"_id":"526b5fe09d872cdc15000056","group":"Algorithms and Data Structures","implementations":[{"language":"java"},{"language":"Scala"}],"subgroup":"Miscellaneous","title":"Rational numbers class","uri":"rational"},{"_id":"526b3a4755122e1803000003","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Number Theory","title":"Euclidean algorithm. GCD, LCM, modular inverse, Chinese remainder theorem","uri":"euclid"},{"_id":"526b3d465831a21c17000005","group":"Algorithms and Data Structures","implementations":[{"language":"java"},{"language":"python"},{"language":"Haskell"}],"subgroup":"Number Theory","title":"Factorization. Fermat's, Pollard's methods","uri":"factorization"},{"_id":"526b5efe9d872cdc1500004e","group":"Algorithms and Data Structures","implementations":[{"language":"java"},{"language":"c++"}],"subgroup":"Number Theory","title":"Prime numbers, sieve of Eratosthenes, Euler's totient function","uri":"prime-numbers"},{"_id":"532ac721b5c58a0200000003","title":"Fast Fourier transform and polynom multiplication in $O(N\\log{N})$","uri":"fft","group":"Algorithms and Data Structures","subgroup":"Numeric Methods","implementations":[{"language":"java"}]},{"_id":"526b83359d872cdc15000092","group":"Algorithms and Data Structures","implementations":[{"language":"c++"}],"subgroup":"Numeric Methods","title":"Laguerre's method of polynom roots finding","uri":"polynom-roots"},{"title":"Simpson's integrating","uri":"simpson-integrating","group":"Algorithms and Data Structures","subgroup":"Numeric Methods","_id":"53133387b217ec0200000005","implementations":[{"language":"java"}]},{"_id":"554f57996b72fc0300000007","title":"Classes","uri":"classes","group":"Basic Language Constructs","subgroup":"Object-oriented programming","implementations":[{"language":"java"}]},{"_id":"53d6fbcfbe25160200000005","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Optimization","title":"Genetic algorithm (tsp)","uri":"genetic-algorithm"},{"_id":"526b496a9d872cdc1500000b","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Optimization","title":"Hill climbing","uri":"hill-climbing"},{"_id":"53d9b4d1cb3fda0200000003","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Optimization","title":"Lin‚ÄìKernighan heuristic (tsp)","uri":"lin-kernighan"},{"_id":"526b5bc59d872cdc15000040","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Optimization","title":"Meet in the middle","uri":"meet-in-the-middle"},{"_id":"526b80149d872cdc1500006e","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Optimization","title":"Simplex algorithm","uri":"simplex-algorithm"},{"_id":"526b819d9d872cdc1500007c","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Optimization","title":"Simulated annealing (tsp)","uri":"simulated-annealing"},{"_id":"52b680cd62357da40c000003","group":"Basic Language Constructs","implementations":[{"language":"java"}],"subgroup":"Other1","title":"Check for Null Value","uri":"check-for-null"},{"_id":"526b5ea79d872cdc15000048","group":"Basic Language Constructs","implementations":[{"language":"java"}],"subgroup":"Other1","title":"Pair (std::pair analog)","uri":"pair"},{"_id":"52b515d4a23078701b000005","group":"Useful Snippets","implementations":[{"language":"javascript"},{"language":"java"},{"language":"python"}],"subgroup":"Other2","title":"Print Object Properties","uri":"debug-object"},{"_id":"526b86949d872cdc1500009f","group":"Useful Snippets","implementations":[{"language":"c++"}],"subgroup":"SSE","title":"SSE Instructions","uri":"sse"},{"_id":"526b7f399d872cdc15000068","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Shortest Paths","title":"Shortest paths. Bellman‚ÄìFord algorithm in $O(V*E)$. Negative cycle detection.","uri":"bellman-ford"},{"_id":"526b7fa09d872cdc1500006a","group":"Algorithms and Data Structures","implementations":[{"language":"java"},{"language":"c++"}],"subgroup":"Shortest Paths","title":"Shortest paths. Dijkstra's algorithm in $O(E * \\log{V})$","uri":"dijkstra-heap"},{"_id":"52d32ff0c4e6580200000005","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Shortest Paths","title":"Shortest paths. Dijkstra's algorithm in $O(V^2)$","uri":"dijkstra"},{"_id":"53c91402a3ee600200000003","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Shortest Paths","title":"Shortest paths. Dijkstra's algorithm with segment tree in $O(E * \\log{V})$","uri":"dijkstra-segment-tree"},{"_id":"526b7fbf9d872cdc1500006c","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Shortest Paths","title":"Shortest paths. Floyd‚ÄìWarshall algorithm in $O(V^3)$","uri":"floyd-warshall"},{"title":"Array partition","uri":"partition","group":"Algorithms and Data Structures","subgroup":"Sorting","_id":"5301f53aef00000200000003","implementations":[{"language":"java"}]},{"_id":"526b4bdd9d872cdc1500001a","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Sorting","title":"Kth order statistic in $O(N)$ on average","uri":"kth-order-statistics"},{"_id":"52b798ef8ae0700200000003","group":"Algorithms and Data Structures","implementations":[{"language":"java"},{"language":"scala"},{"language":"haskell"}],"subgroup":"Sorting","title":"Quicksort","uri":"quick-sort"},{"_id":"526b80389d872cdc15000070","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Sorting","title":"Sorting algorithms: quick-sort, merge, heap, bubble, selection, insertion, counting, radix","uri":"sort"},{"_id":"526b82a29d872cdc1500008a","group":"Basic Language Constructs","implementations":[{"language":"c++"}],"subgroup":"Sorting1","title":"Comparators","uri":"comparators"},{"_id":"526b5cc09d872cdc15000044","group":"Algorithms and Data Structures","implementations":[{"language":"java"},{"language":"c++"}],"subgroup":"Spanning Tree","title":"Minimum spanning tree. Prim's algorithm in $O(E * \\log{V})$","uri":"mst-prim"},{"_id":"526b5e889d872cdc15000046","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Spanning Tree","title":"Minimum spanning tree. Prim's algorithm in $O(V^2)$","uri":"mst-prim-simple"},{"_id":"532872d6a023610200000005","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Spanning Tree","title":"Steiner tree in $O(3^n*n)$","uri":"steiner-tree"},{"_id":"52693d2dbba11a7056000009","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Strings","title":"Aho-Corasick algorithm","uri":"aho-corasick"},{"_id":"526aa5bf0a71693447000007","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Strings","title":"Aho-Corasick simple","uri":"aho-corasick-simple"},{"_id":"526b3acc5831a21c17000003","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Strings","title":"Expression parser: Shunting-yard algorithm","uri":"expression-parser-shunting-yard"},{"_id":"539764dc52e7010200000003","title":"Expression parser: recursive descent algorithm","uri":"expression-parser-recursive-descent","group":"Algorithms and Data Structures","subgroup":"Strings","implementations":[{"language":"java"}]},{"_id":"526b49e79d872cdc1500000f","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Strings","title":"Hashing on strings","uri":"string-hashing"},{"_id":"526b5ed49d872cdc1500004c","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Strings","title":"Prefix tree (Trie)","uri":"trie"},{"_id":"526b7cd59d872cdc1500005a","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Strings","title":"Searching substring in $O(N)$. Knuth‚ÄìMorris‚ÄìPratt algorithm + prefix function","uri":"prefix_function"},{"_id":"526b85499d872cdc15000097","group":"Algorithms and Data Structures","implementations":[{"language":"c++"}],"subgroup":"Strings","title":"Suffix Array and LCP in $O(N)$. Algorithm DC3","uri":"suffix-array-lcp"},{"_id":"526b80929d872cdc15000074","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Strings","title":"Suffix Array in $O(N * \\log^2{N})$","uri":"suffix-array2"},{"_id":"526b80719d872cdc15000072","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Strings","title":"Suffix Array in $O(N * \\log{N})$ and LCP in $O(N)$","uri":"suffix-array"},{"_id":"526b80f99d872cdc15000076","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Strings","title":"Suffix automaton in $O(N * alphabetSize)$","uri":"suffix-automaton"},{"_id":"526b81469d872cdc15000078","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Strings","title":"Suffix tree. Ukkonen's algorithm in $O(N * alphabetSize)$","uri":"suffix-tree"},{"_id":"531731b290843a0200000003","group":"Algorithms and Data Structures","implementations":[{"language":"java"}],"subgroup":"Strings","title":"Z function","uri":"z-function"}]
